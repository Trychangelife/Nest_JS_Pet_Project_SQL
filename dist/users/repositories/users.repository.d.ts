import { Model } from "mongoose";
import { AuthDataType, ConfirmedAttemptDataType, EmailSendDataType, RefreshTokenStorageType, RegistrationDataType } from "../../utils/types";
import { NewPasswordType, RecoveryPasswordType } from "src/auth/dto/RecoveryPasswordType";
import { UsersType } from "src/users/dto/UsersType";
export declare class UsersRepository {
    usersModel: Model<UsersType>;
    protected registrationDataModel: Model<RegistrationDataType>;
    protected authDataModel: Model<AuthDataType>;
    protected codeConfirmModel: Model<ConfirmedAttemptDataType>;
    protected emailSendModel: Model<EmailSendDataType>;
    protected refreshTokenModel: Model<RefreshTokenStorageType>;
    protected recoveryPasswordModel: Model<RecoveryPasswordType>;
    protected newPasswordModel: Model<NewPasswordType>;
    constructor(usersModel: Model<UsersType>, registrationDataModel: Model<RegistrationDataType>, authDataModel: Model<AuthDataType>, codeConfirmModel: Model<ConfirmedAttemptDataType>, emailSendModel: Model<EmailSendDataType>, refreshTokenModel: Model<RefreshTokenStorageType>, recoveryPasswordModel: Model<RecoveryPasswordType>, newPasswordModel: Model<NewPasswordType>);
    allUsers(skip: number, limit: number, sortDirection: string, sortingParam: string, page: number, searchLoginTerm?: string, searchEmailTerm?: string): Promise<object>;
    createUser(newUser: UsersType): Promise<UsersType | null | boolean>;
    createNewPassword(passwordHash: string, passwordSalt: string, recoveryCode: string): Promise<null | boolean>;
    deleteUser(id: string): Promise<boolean>;
    confirmationEmail(user: UsersType, code?: string): Promise<boolean>;
    ipAddressIsScam(ip: string, login?: string): Promise<boolean>;
    counterAttemptAuth(ip: string, login?: string): Promise<boolean>;
    counterAttemptConfirm(ip: string, code?: string): Promise<boolean>;
    counterAttemptEmail(ip: string, email?: string): Promise<boolean>;
    counterAttemptRecoveryPassword(ip: string, email?: string): Promise<boolean>;
    counterAttemptNewPassword(ip: string, code?: string): Promise<boolean>;
    passwordRecovery(email: string, codeRecoveryPassword: string): Promise<boolean>;
    findUserByEmail(email: string): Promise<UsersType | null>;
    findUserById(userId: string): Promise<UsersType | null>;
    findUserByLogin(login: string, description?: string): Promise<UsersType | null>;
    findUserByLoginForMe(login: string): Promise<any[] | UsersType>;
    findUserByConfirmationCode(code: string): Promise<UsersType | null>;
    refreshActivationCode(email: string, code: string): Promise<UsersType | null>;
    getRegistrationDate(): Promise<RegistrationDataType[]>;
    getAuthDate(): Promise<AuthDataType[]>;
    getEmailSendDate(): Promise<EmailSendDataType[]>;
    getConfirmAttemptDate(): Promise<ConfirmedAttemptDataType[]>;
    getTokenDate(): Promise<RefreshTokenStorageType[]>;
    informationAboutRegistration(registrationData: RegistrationDataType): Promise<boolean>;
    informationAboutAuth(authData: AuthDataType): Promise<boolean>;
    informationAboutEmailSend(emailSendData: EmailSendDataType): Promise<boolean>;
    informationAboutConfirmed(confirmedData: ConfirmedAttemptDataType): Promise<boolean>;
    informationAboutPasswordRecovery(recoveryPasswordData: RecoveryPasswordType): Promise<boolean>;
    informationAboutNewPassword(recoveryNewPasswordData: NewPasswordType): Promise<boolean>;
}
